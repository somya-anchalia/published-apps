'''
Crypto module wraps the pyca/cryptography module.

It can be used for encryption/decrption of password/api_keys
'''
__author__ = 'Cybereason Inc.'

from cryptography.fernet import Fernet, InvalidToken

class SNCrypto:
    '''
        This class wraps pyca/cryptography module and implements
        encrypt and decrypt methods.
        This class contains only static methods.
    '''
    @staticmethod
    def gen_key():
        '''
            generates the key to encryption and decryption of the data
        '''
        return Fernet.generate_key()

    @staticmethod
    def encrypt(plain_text, key):
        '''
        Encrypt the data with the specified key
            Parameters:
                plain_text : Text to encrypt
                key : Key through which `plain_text` will be encrypted.
                      Please make sure to pass the key which is generated by this class OR
                      check documentation of pyca/cryptography for more secure key
            Returns:
                Encrypted text in utf-8 encoding
        '''
        try:
            encryptor = Fernet(key)
            return encryptor.encrypt(bytes(plain_text, 'utf-8')).decode('utf-8')
        except InvalidToken:
            return ''

    @staticmethod
    def decrypt(enc, key):
        '''
        Decrypt the data with the specified key
            Parameters:
                enc : Encrypted text to decrypt
                key : Key through which `enc` will be decrypted.
                      Please make sure to pass the same key by which this is encrypted
            Returns:
                Decrypted/plain text in utf-8 encoding
        '''
        try:
            enc = enc.encode()
            decryptor = Fernet(key)
            return decryptor.decrypt(bytes(enc)).decode('utf-8')
        except InvalidToken:
            return ''